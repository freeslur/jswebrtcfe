
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

'use strict';

// import { io } from "socket.io-client";
// const socket = io();
const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const camerasSelect = document.getElementById("cameras");
let myStream;
let muted = false;
let cameraOff = false;

async function getCameras() {
  try {
    const devices = navigator.mediaDevices.enumerateDevices();
    const cameras = (await devices).filter(device => device.kind == "videoinput");
    cameras.forEach(camera => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;
      camerasSelect.appendChild(option);
    });
  } catch (e) {
    console.log(e);
  }
}

async function getMedia(deviceId) {
  try {
    myStream = await navigator.mediaDevices.getUserMedia({
      audio: true,
      video: {
        deviceId: deviceId
      }
    });
    myFace.srcObject = myStream;
    await getCameras();
  } catch (e) {
    console.log(e.message);
  }
}

getMedia();
muteBtn.addEventListener("click", () => {
  myStream.getAudioTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!muted) {
    muteBtn.innerText = "Unmute";
    muted = true;
  } else {
    muteBtn.innerText = "Mute";
    muted = false;
  }
});
cameraBtn.addEventListener("click", () => {
  myStream.getVideoTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!cameraOff) {
    cameraBtn.innerText = "Turn Camera On";
    cameraOff = true;
  } else {
    cameraBtn.innerText = "Turn Camera Off";
    cameraOff = false;
  }
});
camerasSelect.addEventListener("input", () => {
  console.log(camerasSelect.value);

  if (camerasSelect.value === "device") {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });
    console.log("device");
  } else {
    getMedia(camerasSelect.value);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmNqcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBpbyB9IGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5cbi8vIGNvbnN0IHNvY2tldCA9IGlvKCk7XG5jb25zdCBteUZhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15RmFjZVwiKTtcbmNvbnN0IG11dGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm11dGVcIik7XG5jb25zdCBjYW1lcmFCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKTtcbmNvbnN0IGNhbWVyYXNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYXNcIik7XG5cbmxldCBteVN0cmVhbTtcbmxldCBtdXRlZCA9IGZhbHNlO1xubGV0IGNhbWVyYU9mZiA9IGZhbHNlO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDYW1lcmFzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZXMgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcbiAgICBjb25zdCBjYW1lcmFzID0gKGF3YWl0IGRldmljZXMpLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PSBcInZpZGVvaW5wdXRcIik7XG4gICAgY2FtZXJhcy5mb3JFYWNoKChjYW1lcmEpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb24udmFsdWUgPSBjYW1lcmEuZGV2aWNlSWQ7XG4gICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2FtZXJhLmxhYmVsO1xuICAgICAgY2FtZXJhc1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVkaWEoZGV2aWNlSWQpIHtcbiAgdHJ5IHtcbiAgICBteVN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgICAgIGF1ZGlvOiB0cnVlLFxuICAgICAgdmlkZW86IHsgZGV2aWNlSWQ6IGRldmljZUlkIH0sXG4gICAgfSk7XG4gICAgbXlGYWNlLnNyY09iamVjdCA9IG15U3RyZWFtO1xuICAgIGF3YWl0IGdldENhbWVyYXMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZ2V0TWVkaWEoKTtcblxubXV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBteVN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFtdXRlZCkge1xuICAgIG11dGVCdG4uaW5uZXJUZXh0ID0gXCJVbm11dGVcIjtcbiAgICBtdXRlZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIk11dGVcIjtcbiAgICBtdXRlZCA9IGZhbHNlO1xuICB9XG59KTtcbmNhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBteVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFjYW1lcmFPZmYpIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPblwiO1xuICAgIGNhbWVyYU9mZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT2ZmXCI7XG4gICAgY2FtZXJhT2ZmID0gZmFsc2U7XG4gIH1cbn0pO1xuXG5jYW1lcmFzU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICBpZiAoY2FtZXJhc1NlbGVjdC52YWx1ZSA9PT0gXCJkZXZpY2VcIikge1xuICAgIG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhcImRldmljZVwiKTtcbiAgfSBlbHNlIHtcbiAgICBnZXRNZWRpYShjYW1lcmFzU2VsZWN0LnZhbHVlKTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOlsibXlGYWNlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm11dGVCdG4iLCJjYW1lcmFCdG4iLCJjYW1lcmFzU2VsZWN0IiwibXlTdHJlYW0iLCJtdXRlZCIsImNhbWVyYU9mZiIsImdldENhbWVyYXMiLCJkZXZpY2VzIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImNhbWVyYXMiLCJmaWx0ZXIiLCJkZXZpY2UiLCJraW5kIiwiZm9yRWFjaCIsImNhbWVyYSIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImRldmljZUlkIiwiaW5uZXJUZXh0IiwibGFiZWwiLCJhcHBlbmRDaGlsZCIsImUiLCJjb25zb2xlIiwibG9nIiwiZ2V0TWVkaWEiLCJnZXRVc2VyTWVkaWEiLCJhdWRpbyIsInZpZGVvIiwic3JjT2JqZWN0IiwibWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRBdWRpb1RyYWNrcyIsInRyYWNrIiwiZW5hYmxlZCIsImdldFZpZGVvVHJhY2tzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Is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
