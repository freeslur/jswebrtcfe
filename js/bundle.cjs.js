
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

'use strict';

// import { io } from "socket.io-client";
// const socket = io();
const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const camerasSelect = document.getElementById("cameras");
let myStream;
let muted = false;
let cameraOff = false;

async function getCameras() {
  try {
    const devices = navigator.mediaDevices.enumerateDevices();
    const cameras = (await devices).filter(device => device.kind == "videoinput");
    const currentCamera = myStream.getVideoTracks()[0];
    cameras.forEach(camera => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;

      if (currentCamera.deviceId === camera.deviceId) {
        option.selected = true;
      }

      camerasSelect.appendChild(option);
    });
  } catch (e) {
    console.log(e);
  }
}

async function getMedia(deviceId) {
  const initialConstrains = {
    audio: true,
    video: {
      facingMode: "user"
    }
  };
  const cameraConstrains = {
    audio: true,
    video: {
      deviceId: {
        exact: deviceId
      }
    }
  };

  try {
    myStream = await navigator.mediaDevices.getUserMedia(deviceId ? cameraConstrains : initialConstrains);
    myFace.srcObject = myStream;

    if (!deviceId) {
      console.log("get device");
      await getCameras();
    } else {
      console.log("what????");
    }
  } catch (e) {
    console.log(e.message);
  }
}

getMedia();
muteBtn.addEventListener("click", () => {
  myStream.getAudioTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!muted) {
    muteBtn.innerText = "Unmute";
    muted = true;
  } else {
    muteBtn.innerText = "Mute";
    muted = false;
  }
});

function handleVideoOff() {
  myStream.getVideoTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!cameraOff) {
    cameraBtn.innerText = "Turn Camera On";
    cameraOff = true;
  } else {
    cameraBtn.innerText = "Turn Camera Off";
    cameraOff = false;
  }
}

cameraBtn.addEventListener("click", handleVideoOff);

async function handleCameraChange() {
  console.log(camerasSelect.value);

  if (camerasSelect.value === "device") {
    handleVideoOff();
  } else {
    await getMedia(camerasSelect.value);
  }
}

camerasSelect.addEventListener("input", handleCameraChange);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmNqcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBpbyB9IGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5cbi8vIGNvbnN0IHNvY2tldCA9IGlvKCk7XG5jb25zdCBteUZhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15RmFjZVwiKTtcbmNvbnN0IG11dGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm11dGVcIik7XG5jb25zdCBjYW1lcmFCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKTtcbmNvbnN0IGNhbWVyYXNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYXNcIik7XG5cbmxldCBteVN0cmVhbTtcbmxldCBtdXRlZCA9IGZhbHNlO1xubGV0IGNhbWVyYU9mZiA9IGZhbHNlO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDYW1lcmFzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZXMgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcbiAgICBjb25zdCBjYW1lcmFzID0gKGF3YWl0IGRldmljZXMpLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PSBcInZpZGVvaW5wdXRcIik7XG4gICAgY29uc3QgY3VycmVudENhbWVyYSA9IG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgY2FtZXJhcy5mb3JFYWNoKChjYW1lcmEpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb24udmFsdWUgPSBjYW1lcmEuZGV2aWNlSWQ7XG4gICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2FtZXJhLmxhYmVsO1xuICAgICAgaWYgKGN1cnJlbnRDYW1lcmEuZGV2aWNlSWQgPT09IGNhbWVyYS5kZXZpY2VJZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY2FtZXJhc1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVkaWEoZGV2aWNlSWQpIHtcbiAgY29uc3QgaW5pdGlhbENvbnN0cmFpbnMgPSB7XG4gICAgYXVkaW86IHRydWUsXG4gICAgdmlkZW86IHsgZmFjaW5nTW9kZTogXCJ1c2VyXCIgfSxcbiAgfTtcbiAgY29uc3QgY2FtZXJhQ29uc3RyYWlucyA9IHtcbiAgICBhdWRpbzogdHJ1ZSxcbiAgICB2aWRlbzogeyBkZXZpY2VJZDogeyBleGFjdDogZGV2aWNlSWQgfSB9LFxuICB9O1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZGV2aWNlSWQgPyBjYW1lcmFDb25zdHJhaW5zIDogaW5pdGlhbENvbnN0cmFpbnMpO1xuICAgIG15RmFjZS5zcmNPYmplY3QgPSBteVN0cmVhbTtcbiAgICBpZiAoIWRldmljZUlkKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldCBkZXZpY2VcIik7XG4gICAgICBhd2FpdCBnZXRDYW1lcmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwid2hhdD8/Pz9cIik7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVWaWRlb09mZigpIHtcbiAgbXlTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcbiAgfSk7XG4gIGlmICghY2FtZXJhT2ZmKSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT25cIjtcbiAgICBjYW1lcmFPZmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9mZlwiO1xuICAgIGNhbWVyYU9mZiA9IGZhbHNlO1xuICB9XG59XG5cbmNhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlVmlkZW9PZmYpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYW1lcmFDaGFuZ2UoKSB7XG4gIGNvbnNvbGUubG9nKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICBpZiAoY2FtZXJhc1NlbGVjdC52YWx1ZSA9PT0gXCJkZXZpY2VcIikge1xuICAgIGhhbmRsZVZpZGVvT2ZmKCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZ2V0TWVkaWEoY2FtZXJhc1NlbGVjdC52YWx1ZSk7XG4gIH1cbn1cblxuY2FtZXJhc1NlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgaGFuZGxlQ2FtZXJhQ2hhbmdlKTtcbiJdLCJuYW1lcyI6WyJteUZhY2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibXV0ZUJ0biIsImNhbWVyYUJ0biIsImNhbWVyYXNTZWxlY3QiLCJteVN0cmVhbSIsIm11dGVkIiwiY2FtZXJhT2ZmIiwiZ2V0Q2FtZXJhcyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiY2FtZXJhcyIsImZpbHRlciIsImRldmljZSIsImtpbmQiLCJjdXJyZW50Q2FtZXJhIiwiZ2V0VmlkZW9UcmFja3MiLCJmb3JFYWNoIiwiY2FtZXJhIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGV2aWNlSWQiLCJpbm5lclRleHQiLCJsYWJlbCIsInNlbGVjdGVkIiwiYXBwZW5kQ2hpbGQiLCJlIiwiY29uc29sZSIsImxvZyIsImdldE1lZGlhIiwiaW5pdGlhbENvbnN0cmFpbnMiLCJhdWRpbyIsInZpZGVvIiwiZmFjaW5nTW9kZSIsImNhbWVyYUNvbnN0cmFpbnMiLCJleGFjdCIsImdldFVzZXJNZWRpYSIsInNyY09iamVjdCIsIm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QXVkaW9UcmFja3MiLCJ0cmFjayIsImVuYWJsZWQiLCJoYW5kbGVWaWRlb09mZiIsImhhbmRsZUNhbWVyYUNoYW5nZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUNBLE1BQU1BLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWY7QUFDQSxNQUFNQyxPQUFPLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUFoQjtBQUNBLE1BQU1FLFNBQVMsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWxCO0FBQ0EsTUFBTUcsYUFBYSxHQUFHSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBdEI7QUFFQSxJQUFJSSxRQUFKO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLEtBQVo7QUFDQSxJQUFJQyxTQUFTLEdBQUcsS0FBaEI7O0FBRUEsZUFBZUMsVUFBZixHQUE0QjtBQUMxQixNQUFJO0FBQ0YsVUFBTUMsT0FBTyxHQUFHQyxTQUFTLENBQUNDLFlBQVYsQ0FBdUJDLGdCQUF2QixFQUFoQjtBQUNBLFVBQU1DLE9BQU8sR0FBRyxDQUFDLE1BQU1KLE9BQVAsRUFBZ0JLLE1BQWhCLENBQXdCQyxNQUFELElBQVlBLE1BQU0sQ0FBQ0MsSUFBUCxJQUFlLFlBQWxELENBQWhCO0FBQ0EsVUFBTUMsYUFBYSxHQUFHWixRQUFRLENBQUNhLGNBQVQsR0FBMEIsQ0FBMUIsQ0FBdEI7QUFDQUwsSUFBQUEsT0FBTyxDQUFDTSxPQUFSLENBQWlCQyxNQUFELElBQVk7QUFDMUIsWUFBTUMsTUFBTSxHQUFHckIsUUFBUSxDQUFDc0IsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0FELE1BQUFBLE1BQU0sQ0FBQ0UsS0FBUCxHQUFlSCxNQUFNLENBQUNJLFFBQXRCO0FBQ0FILE1BQUFBLE1BQU0sQ0FBQ0ksU0FBUCxHQUFtQkwsTUFBTSxDQUFDTSxLQUExQjs7QUFDQSxVQUFJVCxhQUFhLENBQUNPLFFBQWQsS0FBMkJKLE1BQU0sQ0FBQ0ksUUFBdEMsRUFBZ0Q7QUFDOUNILFFBQUFBLE1BQU0sQ0FBQ00sUUFBUCxHQUFrQixJQUFsQjtBQUNEOztBQUNEdkIsTUFBQUEsYUFBYSxDQUFDd0IsV0FBZCxDQUEwQlAsTUFBMUI7QUFDRCxLQVJEO0FBU0QsR0FiRCxDQWFFLE9BQU9RLENBQVAsRUFBVTtBQUNWQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNEO0FBQ0Y7O0FBRUQsZUFBZUcsUUFBZixDQUF3QlIsUUFBeEIsRUFBa0M7QUFDaEMsUUFBTVMsaUJBQWlCLEdBQUc7QUFDeEJDLElBQUFBLEtBQUssRUFBRSxJQURpQjtBQUV4QkMsSUFBQUEsS0FBSyxFQUFFO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkO0FBRmlCLEdBQTFCO0FBSUEsUUFBTUMsZ0JBQWdCLEdBQUc7QUFDdkJILElBQUFBLEtBQUssRUFBRSxJQURnQjtBQUV2QkMsSUFBQUEsS0FBSyxFQUFFO0FBQUVYLE1BQUFBLFFBQVEsRUFBRTtBQUFFYyxRQUFBQSxLQUFLLEVBQUVkO0FBQVQ7QUFBWjtBQUZnQixHQUF6Qjs7QUFJQSxNQUFJO0FBQ0ZuQixJQUFBQSxRQUFRLEdBQUcsTUFBTUssU0FBUyxDQUFDQyxZQUFWLENBQXVCNEIsWUFBdkIsQ0FBb0NmLFFBQVEsR0FBR2EsZ0JBQUgsR0FBc0JKLGlCQUFsRSxDQUFqQjtBQUNBbEMsSUFBQUEsTUFBTSxDQUFDeUMsU0FBUCxHQUFtQm5DLFFBQW5COztBQUNBLFFBQUksQ0FBQ21CLFFBQUwsRUFBZTtBQUNiTSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFaO0FBQ0EsWUFBTXZCLFVBQVUsRUFBaEI7QUFDRCxLQUhELE1BR087QUFDTHNCLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFVBQVo7QUFDRDtBQUNGLEdBVEQsQ0FTRSxPQUFPRixDQUFQLEVBQVU7QUFDVkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLENBQUMsQ0FBQ1ksT0FBZDtBQUNEO0FBQ0Y7O0FBRURULFFBQVE7QUFFUjlCLE9BQU8sQ0FBQ3dDLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLE1BQU07QUFDdENyQyxFQUFBQSxRQUFRLENBQUNzQyxjQUFULEdBQTBCeEIsT0FBMUIsQ0FBbUN5QixLQUFELElBQVc7QUFDM0NBLElBQUFBLEtBQUssQ0FBQ0MsT0FBTixHQUFnQixDQUFDRCxLQUFLLENBQUNDLE9BQXZCO0FBQ0QsR0FGRDs7QUFHQSxNQUFJLENBQUN2QyxLQUFMLEVBQVk7QUFDVkosSUFBQUEsT0FBTyxDQUFDdUIsU0FBUixHQUFvQixRQUFwQjtBQUNBbkIsSUFBQUEsS0FBSyxHQUFHLElBQVI7QUFDRCxHQUhELE1BR087QUFDTEosSUFBQUEsT0FBTyxDQUFDdUIsU0FBUixHQUFvQixNQUFwQjtBQUNBbkIsSUFBQUEsS0FBSyxHQUFHLEtBQVI7QUFDRDtBQUNGLENBWEQ7O0FBYUEsU0FBU3dDLGNBQVQsR0FBMEI7QUFDeEJ6QyxFQUFBQSxRQUFRLENBQUNhLGNBQVQsR0FBMEJDLE9BQTFCLENBQW1DeUIsS0FBRCxJQUFXO0FBQzNDQSxJQUFBQSxLQUFLLENBQUNDLE9BQU4sR0FBZ0IsQ0FBQ0QsS0FBSyxDQUFDQyxPQUF2QjtBQUNELEdBRkQ7O0FBR0EsTUFBSSxDQUFDdEMsU0FBTCxFQUFnQjtBQUNkSixJQUFBQSxTQUFTLENBQUNzQixTQUFWLEdBQXNCLGdCQUF0QjtBQUNBbEIsSUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDRCxHQUhELE1BR087QUFDTEosSUFBQUEsU0FBUyxDQUFDc0IsU0FBVixHQUFzQixpQkFBdEI7QUFDQWxCLElBQUFBLFNBQVMsR0FBRyxLQUFaO0FBQ0Q7QUFDRjs7QUFFREosU0FBUyxDQUFDdUMsZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBb0NJLGNBQXBDOztBQUVBLGVBQWVDLGtCQUFmLEdBQW9DO0FBQ2xDakIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkzQixhQUFhLENBQUNtQixLQUExQjs7QUFDQSxNQUFJbkIsYUFBYSxDQUFDbUIsS0FBZCxLQUF3QixRQUE1QixFQUFzQztBQUNwQ3VCLElBQUFBLGNBQWM7QUFDZixHQUZELE1BRU87QUFDTCxVQUFNZCxRQUFRLENBQUM1QixhQUFhLENBQUNtQixLQUFmLENBQWQ7QUFDRDtBQUNGOztBQUVEbkIsYUFBYSxDQUFDc0MsZ0JBQWQsQ0FBK0IsT0FBL0IsRUFBd0NLLGtCQUF4Qzs7In0=
