
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

'use strict';

// import { io } from "socket.io-client";
// const socket = io();
const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const camerasSelect = document.getElementById("cameras");
let myStream;
let muted = false;
let cameraOff = false;

async function getCameras() {
  try {
    const devices = navigator.mediaDevices.enumerateDevices();
    const cameras = (await devices).filter(device => device.kind == "videoinput");
    cameras.forEach(camera => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;
      camerasSelect.appendChild(option);
    });
  } catch (e) {
    console.log(e);
  }
}

async function getMedia(deviceId) {
  const initialConstrains = {
    audio: true,
    video: {
      facingMode: "user"
    }
  };
  const cameraConstrains = {
    audio: true,
    video: {
      deviceId: {
        exact: deviceId
      }
    }
  };

  try {
    myStream = await navigator.mediaDevices.getUserMedia(deviceId ? cameraConstrains : initialConstrains);
    myFace.srcObject = myStream;
    if (deviceId === null) await getCameras();
  } catch (e) {
    console.log(e.message);
  }
}

getMedia();
muteBtn.addEventListener("click", () => {
  myStream.getAudioTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!muted) {
    muteBtn.innerText = "Unmute";
    muted = true;
  } else {
    muteBtn.innerText = "Mute";
    muted = false;
  }
});

function handleVideoOff() {
  myStream.getVideoTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!cameraOff) {
    cameraBtn.innerText = "Turn Camera On";
    cameraOff = true;
  } else {
    cameraBtn.innerText = "Turn Camera Off";
    cameraOff = false;
  }
}

cameraBtn.addEventListener("click", handleVideoOff);

async function handleCameraChange() {
  console.log(camerasSelect.value);

  if (camerasSelect.value === "device") {
    handleVideoOff();
  } else {
    await getMedia(camerasSelect.value);
  }
}

camerasSelect.addEventListener("input", handleCameraChange);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmNqcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBpbyB9IGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5cbi8vIGNvbnN0IHNvY2tldCA9IGlvKCk7XG5jb25zdCBteUZhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15RmFjZVwiKTtcbmNvbnN0IG11dGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm11dGVcIik7XG5jb25zdCBjYW1lcmFCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYVwiKTtcbmNvbnN0IGNhbWVyYXNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbWVyYXNcIik7XG5cbmxldCBteVN0cmVhbTtcbmxldCBtdXRlZCA9IGZhbHNlO1xubGV0IGNhbWVyYU9mZiA9IGZhbHNlO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDYW1lcmFzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZXMgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcbiAgICBjb25zdCBjYW1lcmFzID0gKGF3YWl0IGRldmljZXMpLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PSBcInZpZGVvaW5wdXRcIik7XG4gICAgY2FtZXJhcy5mb3JFYWNoKChjYW1lcmEpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb24udmFsdWUgPSBjYW1lcmEuZGV2aWNlSWQ7XG4gICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2FtZXJhLmxhYmVsO1xuICAgICAgY2FtZXJhc1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVkaWEoZGV2aWNlSWQpIHtcbiAgY29uc3QgaW5pdGlhbENvbnN0cmFpbnMgPSB7XG4gICAgYXVkaW86IHRydWUsXG4gICAgdmlkZW86IHsgZmFjaW5nTW9kZTogXCJ1c2VyXCIgfSxcbiAgfTtcbiAgY29uc3QgY2FtZXJhQ29uc3RyYWlucyA9IHtcbiAgICBhdWRpbzogdHJ1ZSxcbiAgICB2aWRlbzogeyBkZXZpY2VJZDogeyBleGFjdDogZGV2aWNlSWQgfSB9LFxuICB9O1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZGV2aWNlSWQgPyBjYW1lcmFDb25zdHJhaW5zIDogaW5pdGlhbENvbnN0cmFpbnMpO1xuICAgIG15RmFjZS5zcmNPYmplY3QgPSBteVN0cmVhbTtcbiAgICBpZiAoZGV2aWNlSWQgPT09IG51bGwpIGF3YWl0IGdldENhbWVyYXMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZ2V0TWVkaWEoKTtcblxubXV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBteVN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFtdXRlZCkge1xuICAgIG11dGVCdG4uaW5uZXJUZXh0ID0gXCJVbm11dGVcIjtcbiAgICBtdXRlZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIk11dGVcIjtcbiAgICBtdXRlZCA9IGZhbHNlO1xuICB9XG59KTtcblxuZnVuY3Rpb24gaGFuZGxlVmlkZW9PZmYoKSB7XG4gIG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIWNhbWVyYU9mZikge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9uXCI7XG4gICAgY2FtZXJhT2ZmID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPZmZcIjtcbiAgICBjYW1lcmFPZmYgPSBmYWxzZTtcbiAgfVxufVxuXG5jYW1lcmFCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVZpZGVvT2ZmKTtcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2FtZXJhQ2hhbmdlKCkge1xuICBjb25zb2xlLmxvZyhjYW1lcmFzU2VsZWN0LnZhbHVlKTtcbiAgaWYgKGNhbWVyYXNTZWxlY3QudmFsdWUgPT09IFwiZGV2aWNlXCIpIHtcbiAgICBoYW5kbGVWaWRlb09mZigpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGdldE1lZGlhKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICB9XG59XG5cbmNhbWVyYXNTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGhhbmRsZUNhbWVyYUNoYW5nZSk7XG4iXSwibmFtZXMiOlsibXlGYWNlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm11dGVCdG4iLCJjYW1lcmFCdG4iLCJjYW1lcmFzU2VsZWN0IiwibXlTdHJlYW0iLCJtdXRlZCIsImNhbWVyYU9mZiIsImdldENhbWVyYXMiLCJkZXZpY2VzIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImNhbWVyYXMiLCJmaWx0ZXIiLCJkZXZpY2UiLCJraW5kIiwiZm9yRWFjaCIsImNhbWVyYSIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImRldmljZUlkIiwiaW5uZXJUZXh0IiwibGFiZWwiLCJhcHBlbmRDaGlsZCIsImUiLCJjb25zb2xlIiwibG9nIiwiZ2V0TWVkaWEiLCJpbml0aWFsQ29uc3RyYWlucyIsImF1ZGlvIiwidmlkZW8iLCJmYWNpbmdNb2RlIiwiY2FtZXJhQ29uc3RyYWlucyIsImV4YWN0IiwiZ2V0VXNlck1lZGlhIiwic3JjT2JqZWN0IiwibWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRBdWRpb1RyYWNrcyIsInRyYWNrIiwiZW5hYmxlZCIsImhhbmRsZVZpZGVvT2ZmIiwiZ2V0VmlkZW9UcmFja3MiLCJoYW5kbGVDYW1lcmFDaGFuZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQSxNQUFNQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixRQUF4QixDQUFmO0FBQ0EsTUFBTUMsT0FBTyxHQUFHRixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBaEI7QUFDQSxNQUFNRSxTQUFTLEdBQUdILFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixRQUF4QixDQUFsQjtBQUNBLE1BQU1HLGFBQWEsR0FBR0osUUFBUSxDQUFDQyxjQUFULENBQXdCLFNBQXhCLENBQXRCO0FBRUEsSUFBSUksUUFBSjtBQUNBLElBQUlDLEtBQUssR0FBRyxLQUFaO0FBQ0EsSUFBSUMsU0FBUyxHQUFHLEtBQWhCOztBQUVBLGVBQWVDLFVBQWYsR0FBNEI7QUFDMUIsTUFBSTtBQUNGLFVBQU1DLE9BQU8sR0FBR0MsU0FBUyxDQUFDQyxZQUFWLENBQXVCQyxnQkFBdkIsRUFBaEI7QUFDQSxVQUFNQyxPQUFPLEdBQUcsQ0FBQyxNQUFNSixPQUFQLEVBQWdCSyxNQUFoQixDQUF3QkMsTUFBRCxJQUFZQSxNQUFNLENBQUNDLElBQVAsSUFBZSxZQUFsRCxDQUFoQjtBQUNBSCxJQUFBQSxPQUFPLENBQUNJLE9BQVIsQ0FBaUJDLE1BQUQsSUFBWTtBQUMxQixZQUFNQyxNQUFNLEdBQUduQixRQUFRLENBQUNvQixhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQUQsTUFBQUEsTUFBTSxDQUFDRSxLQUFQLEdBQWVILE1BQU0sQ0FBQ0ksUUFBdEI7QUFDQUgsTUFBQUEsTUFBTSxD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
