
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.label;
        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia(deviceId) {
    try {
      myStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: {
          deviceId: deviceId
        }
      });
      myFace.srcObject = myStream;
      await getCameras();
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });
  cameraBtn.addEventListener("click", () => {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  });
  camerasSelect.addEventListener("input", () => {
    console.log(camerasSelect.value);

    if (camerasSelect.value === "device") {
      myStream.getVideoTracks().forEach(track => {
        track.enabled = !track.enabled;
      });
      console.log("device");
    } else {
      getMedia(camerasSelect.value);
    }
  });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEubGFiZWw7XG4gICAgICBjYW1lcmFzU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZWRpYShkZXZpY2VJZCkge1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgYXVkaW86IHRydWUsXG4gICAgICB2aWRlbzogeyBkZXZpY2VJZDogZGV2aWNlSWQgfSxcbiAgICB9KTtcbiAgICBteUZhY2Uuc3JjT2JqZWN0ID0gbXlTdHJlYW07XG4gICAgYXdhaXQgZ2V0Q2FtZXJhcygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuY2FtZXJhQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIWNhbWVyYU9mZikge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9uXCI7XG4gICAgY2FtZXJhT2ZmID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPZmZcIjtcbiAgICBjYW1lcmFPZmYgPSBmYWxzZTtcbiAgfVxufSk7XG5cbmNhbWVyYXNTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcbiAgY29uc29sZS5sb2coY2FtZXJhc1NlbGVjdC52YWx1ZSk7XG4gIGlmIChjYW1lcmFzU2VsZWN0LnZhbHVlID09PSBcImRldmljZVwiKSB7XG4gICAgbXlTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKFwiZGV2aWNlXCIpO1xuICB9IGVsc2Uge1xuICAgIGdldE1lZGlhKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICB9XG59KTtcbiJdLCJuYW1lcyI6WyJteUZhY2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibXV0ZUJ0biIsImNhbWVyYUJ0biIsImNhbWVyYXNTZWxlY3QiLCJteVN0cmVhbSIsIm11dGVkIiwiY2FtZXJhT2ZmIiwiZ2V0Q2FtZXJhcyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiY2FtZXJhcyIsImZpbHRlciIsImRldmljZSIsImtpbmQiLCJmb3JFYWNoIiwiY2FtZXJhIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGV2aWNlSWQiLCJpbm5lclRleHQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRNZWRpYSIsImdldFVzZXJNZWRpYSIsImF1ZGlvIiwidmlkZW8iLCJzcmNPYmplY3QiLCJtZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEF1ZGlvVHJhY2tzIiwidHJhY2siLCJlbmFibGVkIiwiZ2V0VmlkZW9UcmFja3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7RUFBQTtFQUVBO0VBQ0EsTUFBTUEsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFB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
