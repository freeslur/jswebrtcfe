
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.label;
        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia(deviceId) {
    const initialConstrains = {
      audio: true,
      video: {
        facingMode: "user"
      }
    };
    const cameraConstrains = {
      audio: true,
      video: {
        deviceId: {
          exact: deviceId
        }
      }
    };

    try {
      myStream = await navigator.mediaDevices.getUserMedia(deviceId ? cameraConstrains : initialConstrains);
      myFace.srcObject = myStream;
      if (deviceId === undefined) await getCameras();
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });

  function handleVideoOff() {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  }

  cameraBtn.addEventListener("click", handleVideoOff);

  async function handleCameraChange() {
    console.log(camerasSelect.value);

    if (camerasSelect.value === "device") {
      handleVideoOff();
    } else {
      await getMedia(camerasSelect.value);
    }
  }

  camerasSelect.addEventListener("input", handleCameraChange);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEubGFiZWw7XG4gICAgICBjYW1lcmFzU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZWRpYShkZXZpY2VJZCkge1xuICBjb25zdCBpbml0aWFsQ29uc3RyYWlucyA9IHtcbiAgICBhdWRpbzogdHJ1ZSxcbiAgICB2aWRlbzogeyBmYWNpbmdNb2RlOiBcInVzZXJcIiB9LFxuICB9O1xuICBjb25zdCBjYW1lcmFDb25zdHJhaW5zID0ge1xuICAgIGF1ZGlvOiB0cnVlLFxuICAgIHZpZGVvOiB7IGRldmljZUlkOiB7IGV4YWN0OiBkZXZpY2VJZCB9IH0sXG4gIH07XG4gIHRyeSB7XG4gICAgbXlTdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShkZXZpY2VJZCA/IGNhbWVyYUNvbnN0cmFpbnMgOiBpbml0aWFsQ29uc3RyYWlucyk7XG4gICAgbXlGYWNlLnNyY09iamVjdCA9IG15U3RyZWFtO1xuICAgIGlmIChkZXZpY2VJZCA9PT0gdW5kZWZpbmVkKSBhd2FpdCBnZXRDYW1lcmFzKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmdldE1lZGlhKCk7XG5cbm11dGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgbXlTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcbiAgfSk7XG4gIGlmICghbXV0ZWQpIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiVW5tdXRlXCI7XG4gICAgbXV0ZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIG11dGVCdG4uaW5uZXJUZXh0ID0gXCJNdXRlXCI7XG4gICAgbXV0ZWQgPSBmYWxzZTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGhhbmRsZVZpZGVvT2ZmKCkge1xuICBteVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFjYW1lcmFPZmYpIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPblwiO1xuICAgIGNhbWVyYU9mZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT2ZmXCI7XG4gICAgY2FtZXJhT2ZmID0gZmFsc2U7XG4gIH1cbn1cblxuY2FtZXJhQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVWaWRlb09mZik7XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNhbWVyYUNoYW5nZSgpIHtcbiAgY29uc29sZS5sb2coY2FtZXJhc1NlbGVjdC52YWx1ZSk7XG4gIGlmIChjYW1lcmFzU2VsZWN0LnZhbHVlID09PSBcImRldmljZVwiKSB7XG4gICAgaGFuZGxlVmlkZW9PZmYoKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBnZXRNZWRpYShjYW1lcmFzU2VsZWN0LnZhbHVlKTtcbiAgfVxufVxuXG5jYW1lcmFzU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBoYW5kbGVDYW1lcmFDaGFuZ2UpO1xuIl0sIm5hbWVzIjpbIm15RmFjZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJtdXRlQnRuIiwiY2FtZXJhQnRuIiwiY2FtZXJhc1NlbGVjdCIsIm15U3RyZWFtIiwibXV0ZWQiLCJjYW1lcmFPZmYiLCJnZXRDYW1lcmFzIiwiZGV2aWNlcyIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJjYW1lcmFzIiwiZmlsdGVyIiwiZGV2aWNlIiwia2luZCIsImZvckVhY2giLCJjYW1lcmEiLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwidmFsdWUiLCJkZXZpY2VJZCIsImlubmVyVGV4dCIsImxhYmVsIiwiYXBwZW5kQ2hpbGQiLCJlIiwiY29uc29sZSIsImxvZyIsImdldE1lZGlhIiwiaW5pdGlhbENvbnN0cmFpbnMiLCJhdWRpbyIsInZpZGVvIiwiZmFjaW5nTW9kZSIsImNhbWVyYUNvbnN0cmFpbnMiLCJleGFjdCIsImdldFVzZXJNZWRpYSIsInNyY09iamVjdCIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QXVkaW9UcmFja3MiLCJ0cmFjayIsImVuYWJsZWQiLCJoYW5kbGVWaWRlb09mZiIsImdldFZpZGVvVHJhY2tzIiwiaGFuZGxlQ2FtZXJhQ2hhbmdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0VBQUE7RUFFQTtFQUNBLE1BQU1BLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWY7RUFDQSxNQUFNQyxPQUFPLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUFoQjtFQUNBLE1BQU1FLFNBQVMsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWxCO0VBQ0EsTUFBTUcsYUFBYSxHQUFHSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBdEI7RUFFQSxJQUFJSSxRQUFKO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLEtBQVo7RUFDQSxJQUFJQyxTQUFTLEdBQUcsS0FBaEI7O0VBRUEsZUFBZUMsVUFBZixHQUE0QjtFQUMxQixNQUFJO0VBQ0YsVUFBTUMsT0FBTyxHQUFHQyxTQUFTLENBQUNDLFlBQVYsQ0FBdUJDLGdCQUF2QixFQUFoQjtFQUNBLFVBQU1DLE9BQU8sR0FBRyxDQUFDLE1BQU1KLE9BQVAsRUFBZ0JLLE1BQWhCLENBQXdCQyxNQUFELElBQVlBLE1BQU0sQ0FBQ0MsSUFBUCxJQUFlLFlBQWxELENBQWhCO0VBQ0FILElBQUFBLE9BQU8sQ0FBQ0ksT0FBUixDQUFpQkMsTUFBRCxJQUFZO0VBQzFCLFlBQU1DLE1BQU0sR0FBR25CLFFBQVEsQ0FBQ29CLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtFQUNBRCxNQUFBQSxNQUFNLENBQUNFLEtBQVAsR0FBZUgsTUFBTSxDQUFDSSxRQUF0QjtFQUNB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
