
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.label;
        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia() {
    try {
      myStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
      });
      myFace.srcObject = myStream;
      await getCameras();
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });
  cameraBtn.addEventListener("click", () => {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  });
  camerasSelect.addEventListener("change", () => {
    console.log("OK");
  });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEubGFiZWw7XG4gICAgICBjYW1lcmFzU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZWRpYSgpIHtcbiAgdHJ5IHtcbiAgICBteVN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgICAgIGF1ZGlvOiB0cnVlLFxuICAgICAgdmlkZW86IHRydWUsXG4gICAgfSk7XG4gICAgbXlGYWNlLnNyY09iamVjdCA9IG15U3RyZWFtO1xuICAgIGF3YWl0IGdldENhbWVyYXMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZ2V0TWVkaWEoKTtcblxubXV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBteVN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFtdXRlZCkge1xuICAgIG11dGVCdG4uaW5uZXJUZXh0ID0gXCJVbm11dGVcIjtcbiAgICBtdXRlZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIk11dGVcIjtcbiAgICBtdXRlZCA9IGZhbHNlO1xuICB9XG59KTtcbmNhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBteVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICB9KTtcbiAgaWYgKCFjYW1lcmFPZmYpIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPblwiO1xuICAgIGNhbWVyYU9mZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT2ZmXCI7XG4gICAgY2FtZXJhT2ZmID0gZmFsc2U7XG4gIH1cbn0pO1xuXG5jYW1lcmFzU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIk9LXCIpO1xufSk7XG4iXSwibmFtZXMiOlsibXlGYWNlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm11dGVCdG4iLCJjYW1lcmFCdG4iLCJjYW1lcmFzU2VsZWN0IiwibXlTdHJlYW0iLCJtdXRlZCIsImNhbWVyYU9mZiIsImdldENhbWVyYXMiLCJkZXZpY2VzIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImNhbWVyYXMiLCJmaWx0ZXIiLCJkZXZpY2UiLCJraW5kIiwiZm9yRWFjaCIsImNhbWVyYSIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsImRldmljZUlkIiwiaW5uZXJUZXh0IiwibGFiZWwiLCJhcHBlbmRDaGlsZCIsImUiLCJjb25zb2xlIiwibG9nIiwiZ2V0TWVkaWEiLCJnZXRVc2VyTWVkaWEiLCJhdWRpbyIsInZpZGVvIiwic3JjT2JqZWN0IiwibWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRBdWRpb1RyYWNrcyIsInRyYWNrIiwiZW5hYmxlZCIsImdldFZpZGVvVHJhY2tzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0VBQUE7RUFFQTtFQUNBLE1BQU1BLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWY7RUFDQSxNQUFNQyxPQUFPLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUFoQjtFQUNBLE1BQU1FLFNBQVMsR0FBR0gsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWxCO0VBQ0EsTUFBTUcsYUFBYSxHQUFHSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBdEI7RUFFQSxJQUFJSSxRQUFKO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLEtBQVo7RUFDQSxJQUFJQyxTQUFTLEdBQUcsS0FBaEI7O0VBRUEsZUFBZUMsVUFBZixHQUE0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
