
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      console.log(cameras);
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.kind;
        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia() {
    try {
      myStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
      });
      myFace.srcObject = myStream;
      await getCameras();
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });
  cameraBtn.addEventListener("click", () => {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjb25zb2xlLmxvZyhjYW1lcmFzKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEua2luZDtcbiAgICAgIGNhbWVyYXNTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE1lZGlhKCkge1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgYXVkaW86IHRydWUsXG4gICAgICB2aWRlbzogdHJ1ZSxcbiAgICB9KTtcbiAgICBteUZhY2Uuc3JjT2JqZWN0ID0gbXlTdHJlYW07XG4gICAgYXdhaXQgZ2V0Q2FtZXJhcygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuY2FtZXJhQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIWNhbWVyYU9mZikge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9uXCI7XG4gICAgY2FtZXJhT2ZmID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPZmZcIjtcbiAgICBjYW1lcmFPZmYgPSBmYWxzZTtcbiAgfVxufSk7XG4iXSwibmFtZXMiOlsibXlGYWNlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm11dGVCdG4iLCJjYW1lcmFCdG4iLCJjYW1lcmFzU2VsZWN0IiwibXlTdHJlYW0iLCJtdXRlZCIsImNhbWVyYU9mZiIsImdldENhbWVyYXMiLCJkZXZpY2VzIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImNhbWVyYXMiLCJmaWx0ZXIiLCJkZXZpY2UiLCJraW5kIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJjYW1lcmEiLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwidmFsdWUiLCJkZXZpY2VJZCIsImlubmVyVGV4dCIsImFwcGVuZENoaWxkIiwiZSIsImdldE1lZGlhIiwiZ2V0VXNlck1lZGlhIiwiYXVkaW8iLCJ2aWRlbyIsInNyY09iamVjdCIsIm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QXVkaW9UcmFja3MiLCJ0cmFjayIsImVuYWJsZWQiLCJnZXRWaWRlb1RyYWNrcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztFQUFBO0VBRUE7RUFDQSxNQUFNQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixRQUF4QixDQUFmO0VBQ0EsTUFBTUMsT0FBTyxHQUFHRixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBaEI7RUFDQSxNQUFNRSxTQUFTLEdBQUdILFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixRQUF4QixDQUFsQjtFQUNBLE1BQU1HLGFBQWEsR0FBR0osUUFBUSxDQUFDQyxjQUFULENBQXdCLFNBQXhCLENBQXRCO0VBRUEsSUFBSUksUUFBSjtFQUNBLElBQUlDLEtBQUssR0FBRyxLQUFaO0VBQ0EsSUFBSUMsU0FBUyxHQUFHLEtBQWhCOztFQUVBLGVBQWVDLFVBQWYsR0FBNEI7RUFDMUIsTUFBSTtFQUNGLFVBQU1DLE9BQU8sR0FBR0MsU0FBUyxDQUFDQyxZQUFWLENBQXVCQyxnQkFBdkIs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
