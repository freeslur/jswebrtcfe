
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  document.getElementById("welcome");
  const call = document.getElementById("call");
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  call.hidden = true;
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      const currentCamera = myStream.getVideoTracks()[0];
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.label;

        if (currentCamera.deviceId === camera.deviceId) {
          option.selected = true;
        }

        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia(deviceId) {
    const initialConstrains = {
      audio: true,
      video: {
        facingMode: "user"
      }
    };
    const cameraConstrains = {
      audio: true,
      video: {
        deviceId: {
          exact: deviceId
        }
      }
    };

    try {
      myStream = await navigator.mediaDevices.getUserMedia(deviceId ? cameraConstrains : initialConstrains);
      myFace.srcObject = myStream;

      if (!deviceId) {
        await getCameras();
      }
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });

  function handleVideoOff() {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  }

  cameraBtn.addEventListener("click", handleVideoOff);

  async function handleCameraChange() {
    await getMedia(camerasSelect.value);
  }

  camerasSelect.addEventListener("input", handleCameraChange);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IHdlbGNvbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndlbGNvbWVcIik7XG5jb25zdCBjYWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYWxsXCIpO1xuY29uc3QgbXlGYWNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUZhY2VcIik7XG5jb25zdCBtdXRlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtdXRlXCIpO1xuY29uc3QgY2FtZXJhQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFcIik7XG5jb25zdCBjYW1lcmFzU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1lcmFzXCIpO1xuXG5jYWxsLmhpZGRlbiA9IHRydWU7XG5cbmxldCBteVN0cmVhbTtcbmxldCBtdXRlZCA9IGZhbHNlO1xubGV0IGNhbWVyYU9mZiA9IGZhbHNlO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRDYW1lcmFzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZXMgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcbiAgICBjb25zdCBjYW1lcmFzID0gKGF3YWl0IGRldmljZXMpLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PSBcInZpZGVvaW5wdXRcIik7XG4gICAgY29uc3QgY3VycmVudENhbWVyYSA9IG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgY2FtZXJhcy5mb3JFYWNoKChjYW1lcmEpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb24udmFsdWUgPSBjYW1lcmEuZGV2aWNlSWQ7XG4gICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2FtZXJhLmxhYmVsO1xuICAgICAgaWYgKGN1cnJlbnRDYW1lcmEuZGV2aWNlSWQgPT09IGNhbWVyYS5kZXZpY2VJZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY2FtZXJhc1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVkaWEoZGV2aWNlSWQpIHtcbiAgY29uc3QgaW5pdGlhbENvbnN0cmFpbnMgPSB7XG4gICAgYXVkaW86IHRydWUsXG4gICAgdmlkZW86IHsgZmFjaW5nTW9kZTogXCJ1c2VyXCIgfSxcbiAgfTtcbiAgY29uc3QgY2FtZXJhQ29uc3RyYWlucyA9IHtcbiAgICBhdWRpbzogdHJ1ZSxcbiAgICB2aWRlbzogeyBkZXZpY2VJZDogeyBleGFjdDogZGV2aWNlSWQgfSB9LFxuICB9O1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZGV2aWNlSWQgPyBjYW1lcmFDb25zdHJhaW5zIDogaW5pdGlhbENvbnN0cmFpbnMpO1xuICAgIG15RmFjZS5zcmNPYmplY3QgPSBteVN0cmVhbTtcbiAgICBpZiAoIWRldmljZUlkKSB7XG4gICAgICBhd2FpdCBnZXRDYW1lcmFzKCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVWaWRlb09mZigpIHtcbiAgbXlTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcbiAgfSk7XG4gIGlmICghY2FtZXJhT2ZmKSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT25cIjtcbiAgICBjYW1lcmFPZmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9mZlwiO1xuICAgIGNhbWVyYU9mZiA9IGZhbHNlO1xuICB9XG59XG5cbmNhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlVmlkZW9PZmYpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYW1lcmFDaGFuZ2UoKSB7XG4gIGF3YWl0IGdldE1lZGlhKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xufVxuXG5jYW1lcmFzU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBoYW5kbGVDYW1lcmFDaGFuZ2UpO1xuIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjYWxsIiwibXlGYWNlIiwibXV0ZUJ0biIsImNhbWVyYUJ0biIsImNhbWVyYXNTZWxlY3QiLCJoaWRkZW4iLCJteVN0cmVhbSIsIm11dGVkIiwiY2FtZXJhT2ZmIiwiZ2V0Q2FtZXJhcyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiY2FtZXJhcyIsImZpbHRlciIsImRldmljZSIsImtpbmQiLCJjdXJyZW50Q2FtZXJhIiwiZ2V0VmlkZW9UcmFja3MiLCJmb3JFYWNoIiwiY2FtZXJhIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGV2aWNlSWQiLCJpbm5lclRleHQiLCJsYWJlbCIsInNlbGVjdGVkIiwiYXBwZW5kQ2hpbGQiLCJlIiwiY29uc29sZSIsImxvZyIsImdldE1lZGlhIiwiaW5pdGlhbENvbnN0cmFpbnMiLCJhdWRpbyIsInZpZGVvIiwiZmFjaW5nTW9kZSIsImNhbWVyYUNvbnN0cmFpbnMiLCJleGFjdCIsImdldFVzZXJNZWRpYSIsInNyY09iamVjdCIsIm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QXVkaW9UcmFja3MiLCJ0cmFjayIsImVuYWJsZWQiLCJoYW5kbGVWaWRlb09mZiIsImhhbmRsZUNhbWVyYUNoYW5nZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztFQUFBO0VBRUE7RUFDZ0JBLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixTQUF4QjtFQUNoQixNQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUFiO0VBQ0EsTUFBTUUsTUFBTSxHQUFHSCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBZjtFQUNBLE1BQU1HLE9BQU8sR0FBR0osUUFBUSxDQUFDQyxjQUFULENBQXdCLE1BQXhCLENBQWhCO0VBQ0EsTUFBTUksU0FBUyxHQUFHTCxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBbEI7RUFDQSxNQUFNSyxhQUFhLEdBQUdOLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixTQUF4QixDQUF0QjtFQUVBQyxJQUFJLENBQUNLLE1BQUwsR0FBYyxJQUFkO0VBRUEsSUFBSUMsUUFBSjtFQUNBLElBQUlDLEtBQUssR0FBRyxLQUFaO0VBQ0EsSUFBSUMsU0FBUyxHQUFHLEtBQWhCOztFQUVBLGVBQWVDLFVBQWYsR0FBNEI7RUFDMUIsTUFBSTtF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
