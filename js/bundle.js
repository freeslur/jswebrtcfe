
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

(function () {
  'use strict';

  // import { io } from "socket.io-client";
  // const socket = io();
  const myFace = document.getElementById("myFace");
  const muteBtn = document.getElementById("mute");
  const cameraBtn = document.getElementById("camera");
  const camerasSelect = document.getElementById("cameras");
  let myStream;
  let muted = false;
  let cameraOff = false;

  async function getCameras() {
    try {
      const devices = navigator.mediaDevices.enumerateDevices();
      const cameras = (await devices).filter(device => device.kind == "videoinput");
      cameras.forEach(camera => {
        const option = document.createElement("option");
        option.value = camera.deviceId;
        option.innerText = camera.label;
        camerasSelect.appendChild(option);
      });
    } catch (e) {
      console.log(e);
    }
  }

  async function getMedia(deviceId) {
    try {
      myStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: {
          deviceId: deviceId
        }
      });
      myFace.srcObject = myStream;
      await getCameras();
    } catch (e) {
      console.log(e.message);
    }
  }

  getMedia();
  muteBtn.addEventListener("click", () => {
    myStream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!muted) {
      muteBtn.innerText = "Unmute";
      muted = true;
    } else {
      muteBtn.innerText = "Mute";
      muted = false;
    }
  });

  function handleVideoOff() {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });

    if (!cameraOff) {
      cameraBtn.innerText = "Turn Camera On";
      cameraOff = true;
    } else {
      cameraBtn.innerText = "Turn Camera Off";
      cameraOff = false;
    }
  }

  cameraBtn.addEventListener("click", handleVideoOff);

  async function handleCameraChange() {
    console.log(camerasSelect.value);

    if (camerasSelect.value === "device") {
      handleVideoOff();
    } else {
      await getMedia(camerasSelect.value);
    }
  }

  camerasSelect.addEventListener("input", handleCameraChange);

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEubGFiZWw7XG4gICAgICBjYW1lcmFzU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZWRpYShkZXZpY2VJZCkge1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgYXVkaW86IHRydWUsXG4gICAgICB2aWRlbzogeyBkZXZpY2VJZDogZGV2aWNlSWQgfSxcbiAgICB9KTtcbiAgICBteUZhY2Uuc3JjT2JqZWN0ID0gbXlTdHJlYW07XG4gICAgYXdhaXQgZ2V0Q2FtZXJhcygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVWaWRlb09mZigpIHtcbiAgbXlTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcbiAgfSk7XG4gIGlmICghY2FtZXJhT2ZmKSB7XG4gICAgY2FtZXJhQnRuLmlubmVyVGV4dCA9IFwiVHVybiBDYW1lcmEgT25cIjtcbiAgICBjYW1lcmFPZmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9mZlwiO1xuICAgIGNhbWVyYU9mZiA9IGZhbHNlO1xuICB9XG59XG5cbmNhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlVmlkZW9PZmYpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYW1lcmFDaGFuZ2UoKSB7XG4gIGNvbnNvbGUubG9nKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICBpZiAoY2FtZXJhc1NlbGVjdC52YWx1ZSA9PT0gXCJkZXZpY2VcIikge1xuICAgIGhhbmRsZVZpZGVvT2ZmKCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZ2V0TWVkaWEoY2FtZXJhc1NlbGVjdC52YWx1ZSk7XG4gIH1cbn1cblxuY2FtZXJhc1NlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgaGFuZGxlQ2FtZXJhQ2hhbmdlKTtcbiJdLCJuYW1lcyI6WyJteUZhY2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibXV0ZUJ0biIsImNhbWVyYUJ0biIsImNhbWVyYXNTZWxlY3QiLCJteVN0cmVhbSIsIm11dGVkIiwiY2FtZXJhT2ZmIiwiZ2V0Q2FtZXJhcyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiY2FtZXJhcyIsImZpbHRlciIsImRldmljZSIsImtpbmQiLCJmb3JFYWNoIiwiY2FtZXJhIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGV2aWNlSWQiLCJpbm5lclRleHQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRNZWRpYSIsImdldFVzZXJNZWRpYSIsImF1ZGlvIiwidmlkZW8iLCJzcmNPYmplY3QiLCJtZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEF1ZGlvVHJhY2tzIiwidHJhY2siLCJlbmFibGVkIiwiaGFuZGxlVmlkZW9PZmYiLCJnZXRWaWRlb1RyYWNrcyIsImhhbmRsZUNhbWVyYUNoYW5nZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztFQUFBO0VBRUE7RUFDQSxNQUFNQSxNQUFNLEdB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
