
  /**
   * @license
   * jswebrtcfe.js v1.0.0
   * Released under the MIT License.
   */

// import { io } from "socket.io-client";
// const socket = io();
const myFace = document.getElementById("myFace");
const muteBtn = document.getElementById("mute");
const cameraBtn = document.getElementById("camera");
const camerasSelect = document.getElementById("cameras");
let myStream;
let muted = false;
let cameraOff = false;

async function getCameras() {
  try {
    const devices = navigator.mediaDevices.enumerateDevices();
    const cameras = (await devices).filter(device => device.kind == "videoinput");
    cameras.forEach(camera => {
      const option = document.createElement("option");
      option.value = camera.deviceId;
      option.innerText = camera.label;
      camerasSelect.appendChild(option);
    });
  } catch (e) {
    console.log(e);
  }
}

async function getMedia(deviceId) {
  try {
    myStream = await navigator.mediaDevices.getUserMedia({
      audio: true,
      video: {
        deviceId: deviceId
      }
    });
    myFace.srcObject = myStream;
    await getCameras();
  } catch (e) {
    console.log(e.message);
  }
}

getMedia();
muteBtn.addEventListener("click", () => {
  myStream.getAudioTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!muted) {
    muteBtn.innerText = "Unmute";
    muted = true;
  } else {
    muteBtn.innerText = "Mute";
    muted = false;
  }
});
cameraBtn.addEventListener("click", () => {
  myStream.getVideoTracks().forEach(track => {
    track.enabled = !track.enabled;
  });

  if (!cameraOff) {
    cameraBtn.innerText = "Turn Camera On";
    cameraOff = true;
  } else {
    cameraBtn.innerText = "Turn Camera Off";
    cameraOff = false;
  }
});
camerasSelect.addEventListener("input", () => {
  console.log(camerasSelect.value);

  if (camerasSelect.value === "device") {
    myStream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });
    console.log("device");
  } else {
    getMedia(camerasSelect.value);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmVzLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcblxuLy8gY29uc3Qgc29ja2V0ID0gaW8oKTtcbmNvbnN0IG15RmFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGYWNlXCIpO1xuY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXV0ZVwiKTtcbmNvbnN0IGNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhXCIpO1xuY29uc3QgY2FtZXJhc1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FtZXJhc1wiKTtcblxubGV0IG15U3RyZWFtO1xubGV0IG11dGVkID0gZmFsc2U7XG5sZXQgY2FtZXJhT2ZmID0gZmFsc2U7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENhbWVyYXMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IGNhbWVyYXMgPSAoYXdhaXQgZGV2aWNlcykuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09IFwidmlkZW9pbnB1dFwiKTtcbiAgICBjYW1lcmFzLmZvckVhY2goKGNhbWVyYSkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGNhbWVyYS5kZXZpY2VJZDtcbiAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBjYW1lcmEubGFiZWw7XG4gICAgICBjYW1lcmFzU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRNZWRpYShkZXZpY2VJZCkge1xuICB0cnkge1xuICAgIG15U3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgYXVkaW86IHRydWUsXG4gICAgICB2aWRlbzogeyBkZXZpY2VJZDogZGV2aWNlSWQgfSxcbiAgICB9KTtcbiAgICBteUZhY2Uuc3JjT2JqZWN0ID0gbXlTdHJlYW07XG4gICAgYXdhaXQgZ2V0Q2FtZXJhcygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5nZXRNZWRpYSgpO1xuXG5tdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIW11dGVkKSB7XG4gICAgbXV0ZUJ0bi5pbm5lclRleHQgPSBcIlVubXV0ZVwiO1xuICAgIG11dGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtdXRlQnRuLmlubmVyVGV4dCA9IFwiTXV0ZVwiO1xuICAgIG11dGVkID0gZmFsc2U7XG4gIH1cbn0pO1xuY2FtZXJhQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG15U3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XG4gIH0pO1xuICBpZiAoIWNhbWVyYU9mZikge1xuICAgIGNhbWVyYUJ0bi5pbm5lclRleHQgPSBcIlR1cm4gQ2FtZXJhIE9uXCI7XG4gICAgY2FtZXJhT2ZmID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjYW1lcmFCdG4uaW5uZXJUZXh0ID0gXCJUdXJuIENhbWVyYSBPZmZcIjtcbiAgICBjYW1lcmFPZmYgPSBmYWxzZTtcbiAgfVxufSk7XG5cbmNhbWVyYXNTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcbiAgY29uc29sZS5sb2coY2FtZXJhc1NlbGVjdC52YWx1ZSk7XG4gIGlmIChjYW1lcmFzU2VsZWN0LnZhbHVlID09PSBcImRldmljZVwiKSB7XG4gICAgbXlTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKFwiZGV2aWNlXCIpO1xuICB9IGVsc2Uge1xuICAgIGdldE1lZGlhKGNhbWVyYXNTZWxlY3QudmFsdWUpO1xuICB9XG59KTtcbiJdLCJuYW1lcyI6WyJteUZhY2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibXV0ZUJ0biIsImNhbWVyYUJ0biIsImNhbWVyYXNTZWxlY3QiLCJteVN0cmVhbSIsIm11dGVkIiwiY2FtZXJhT2ZmIiwiZ2V0Q2FtZXJhcyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiY2FtZXJhcyIsImZpbHRlciIsImRldmljZSIsImtpbmQiLCJmb3JFYWNoIiwiY2FtZXJhIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGV2aWNlSWQiLCJpbm5lclRleHQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRNZWRpYSIsImdldFVzZXJNZWRpYSIsImF1ZGlvIiwidmlkZW8iLCJzcmNPYmplY3QiLCJtZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEF1ZGlvVHJhY2tzIiwidHJhY2siLCJlbmFibGVkIiwiZ2V0VmlkZW9UcmFja3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFB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
